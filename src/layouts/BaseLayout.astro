---
interface Props {
  title?: string
  description?: string
  image?: string
}

const {
  title = 'Aaron Qian - Input Coffee, Output Code',
  description = 'Software Engineer, Freelancer, Father. Building projects and sharing tech insights.',
  image = '/og-image.png',
} = Astro.props
---

<!doctype html>
<html lang="en" class="h-full">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />

    <!-- Fonts & Styles -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/src/styles/global.css" />

    <!-- Dark mode script - runs before page render to prevent flash -->
    <script is:inline>
      function updateTheme() {
        const theme = localStorage.getItem('theme') || 'system'
        const isDark =
          theme === 'dark' ||
          (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches)

        if (isDark) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
      }

      updateTheme()

      // Listen for system theme changes when in system mode
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
        if (localStorage.getItem('theme') === 'system' || !localStorage.getItem('theme')) {
          updateTheme()
        }
      })
    </script>
  </head>
  <body class="flex min-h-full flex-col bg-bg font-sans text-fg">
    <slot />

    <!-- Initialize toggle systems after DOM is ready -->
    <script>
      import { setupToggles } from '../lib/toggles'
      import { setupThemeToggle } from '../lib/themeToggle'

      setupToggles()
      setupThemeToggle()
    </script>
  </body>
</html>
