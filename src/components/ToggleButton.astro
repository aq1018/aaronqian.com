---
interface Props {
  id: string
  ariaLabel: string
  class?: string
}

const { id, ariaLabel, class: className = '' } = Astro.props
---

<div class={`relative ${className}`}>
  <button
    {id}
    type="button"
    class="flex items-center gap-1 rounded-lg p-2 text-muted transition-colors"
    aria-label={ariaLabel}
    aria-haspopup="true"
    aria-expanded="false"
  >
    <slot />
  </button>

  <slot name="menu" />
</div>

<script>
  // Generic toggle behavior - works for any toggle button + menu combo
  function initializeToggleButton(buttonId: string) {
    const button = document.getElementById(buttonId)
    const menu = button?.nextElementSibling

    if (!button || !menu) return

    // Toggle menu visibility
    button.addEventListener('click', (e) => {
      e.stopPropagation()
      menu.classList.toggle('hidden')
      const expanded = button.getAttribute('aria-expanded') === 'true'
      button.setAttribute('aria-expanded', String(!expanded))
    })

    // Close menu when clicking outside
    document.addEventListener('click', () => {
      menu.classList.add('hidden')
      button.setAttribute('aria-expanded', 'false')
    })
  }

  // Initialize all toggle buttons on the page
  document.querySelectorAll('[aria-haspopup="true"]').forEach((button) => {
    if (button.id) {
      initializeToggleButton(button.id)
    }
  })
</script>
