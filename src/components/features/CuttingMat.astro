---
/**
 * Cutting mat background component
 * Technical grid with optional measurement overlays
 */

import { defaultOptions } from './CuttingMat.config'
import type { CuttingMatOptions } from './CuttingMat.types'
import AngleLabels from './CuttingMatAngleLabels.astro'
import AngleLines from './CuttingMatAngleLines.astro'
import AngleMarks from './CuttingMatAngleMarks.astro'
import Arcs from './CuttingMatArcs.astro'
import Axes from './CuttingMatAxes.astro'
import GradientMask from './CuttingMatGradientMask.astro'
import GridLines from './CuttingMatGridLines.astro'
import TeethMarks from './CuttingMatTeethMarks.astro'

interface Props extends Partial<CuttingMatOptions> {
  class?: string
}

const { class: className, ...options } = Astro.props

// Merge with defaults
const config = { ...defaultOptions, ...options }

// Use last arc if angleLabelArcIndex is -1
const labelArcIndex =
  config.angleLabelArcIndex === -1 ? config.arcCount - 1 : config.angleLabelArcIndex
const finalConfig = { ...config, angleLabelArcIndex: labelArcIndex }

// Use fixed large dimensions for CSS scaling
const width = 4000
const height = 4000

// Calculate minor interval
const minorInterval = finalConfig.majorLineInterval / finalConfig.majorMinorRatio
---

<div class={`relative ${className ?? ''}`} data-cutting-mat>
  <slot />
  <svg
    viewBox={`0 0 ${width} ${height}`}
    {width}
    {height}
    style="position: absolute; bottom: 0; left: 50%; transform: translateX(-50%);"
    class="cutting-mat-overlays"
  >
    <!-- Gradient mask -->
    <GradientMask {width} {height} />

    <!-- Main group with mask -->
    <g stroke="currentColor" fill="none" stroke-width="1" mask="url(#fade-mask)">
      <!-- Coordinate axes -->
      <Axes
        {width}
        {height}
        opacity={finalConfig.majorOpacity}
        strokeWidth={finalConfig.majorStrokeWidth}
      />

      <!-- Teeth marks on x-axis (optional) -->
      {
        finalConfig.showTeeth && (
          <TeethMarks
            width={width}
            height={height}
            minorInterval={minorInterval}
            opacity={finalConfig.majorOpacity}
            strokeWidth={finalConfig.minorStrokeWidth}
          />
        )
      }

      <!-- Vertical and horizontal grid lines -->
      <GridLines
        {width}
        {height}
        majorLineInterval={finalConfig.majorLineInterval}
        {minorInterval}
        majorOpacity={finalConfig.majorOpacity}
        minorOpacity={finalConfig.minorOpacity}
        majorStrokeWidth={finalConfig.majorStrokeWidth}
        minorStrokeWidth={finalConfig.minorStrokeWidth}
      />

      <!-- Half circles at origin -->
      <Arcs
        {width}
        {height}
        arcCount={finalConfig.arcCount}
        arcRadiusInterval={finalConfig.arcRadiusInterval}
        majorLineInterval={finalConfig.majorLineInterval}
        opacity={finalConfig.majorOpacity}
        strokeWidth={finalConfig.majorStrokeWidth}
      />

      <!-- Diagonal angle lines -->
      <AngleLines
        {width}
        {height}
        angleLineCount={finalConfig.angleLineCount}
        opacity={finalConfig.majorOpacity}
        strokeWidth={finalConfig.majorStrokeWidth}
      />

      <!-- Angle labels -->
      <AngleLabels
        {width}
        {height}
        angleLineCount={finalConfig.angleLineCount}
        angleLabelArcIndex={finalConfig.angleLabelArcIndex}
        majorLineInterval={finalConfig.majorLineInterval}
        labelOpacity={finalConfig.labelOpacity}
      />

      <!-- Angle mark arcs -->
      <AngleMarks
        {width}
        {height}
        angleLineCount={finalConfig.angleLineCount}
        {minorInterval}
        angleMarkRadius={finalConfig.angleMarkRadius}
        opacity={finalConfig.majorOpacity}
        strokeWidth={finalConfig.majorStrokeWidth}
      />
    </g>
  </svg>
</div>

<style>
  [data-cutting-mat] {
    position: relative;
    background-color: var(--color-surface);
    overflow: hidden;
    color: var(--color-primary);
  }

  .cutting-mat-overlays {
    pointer-events: none;
  }
</style>
