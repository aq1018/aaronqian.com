---
/**
 * Creates small angle mark arcs at origin (geometric angle notation)
 */

interface Props {
  width: number
  height: number
  angleLineCount: number
  minorInterval: number
  angleMarkRadius: number
  opacity: number
  strokeWidth: number
}

const { width, height, angleLineCount, minorInterval, angleMarkRadius, opacity, strokeWidth } =
  Astro.props

const centerX = width / 2
const bottomY = height
const angleMarkArcRadius = angleMarkRadius * minorInterval

// Calculate angles (30째 to 150째, evenly distributed)
const startAngle = 30
const endAngle = 150
const angleRange = endAngle - startAngle
const angles = Array.from(
  { length: angleLineCount },
  (_, i) => startAngle + (i * angleRange) / (angleLineCount - 1),
)

let rightArc: { d: string } | null = null
let leftArc: { d: string } | null = null

if (angles.length > 0) {
  const firstAngle = angles[0]
  const lastAngle = angles[angles.length - 1]

  // Right arc: from x-axis (0째) to first angle line
  const rightStartX = centerX + angleMarkArcRadius
  const rightStartY = bottomY
  const rightEndX = centerX + angleMarkArcRadius * Math.cos((firstAngle * Math.PI) / 180)
  const rightEndY = bottomY - angleMarkArcRadius * Math.sin((firstAngle * Math.PI) / 180)
  const rightD = `M ${rightStartX} ${rightStartY} A ${angleMarkArcRadius} ${angleMarkArcRadius} 0 0 0 ${rightEndX} ${rightEndY}`
  rightArc = { d: rightD }

  // Left arc: from last angle line to x-axis (180째)
  const leftStartX = centerX + angleMarkArcRadius * Math.cos((lastAngle * Math.PI) / 180)
  const leftStartY = bottomY - angleMarkArcRadius * Math.sin((lastAngle * Math.PI) / 180)
  const leftEndX = centerX - angleMarkArcRadius
  const leftEndY = bottomY
  const leftD = `M ${leftStartX} ${leftStartY} A ${angleMarkArcRadius} ${angleMarkArcRadius} 0 0 0 ${leftEndX} ${leftEndY}`
  leftArc = { d: leftD }
}
---

{rightArc && <path d={rightArc.d} opacity={opacity} stroke-width={strokeWidth} />}
{leftArc && <path d={leftArc.d} opacity={opacity} stroke-width={strokeWidth} />}
