---
// ProjectLogEntry - Terminal-style log entry component
import type { CollectionEntry } from 'astro:content'
import Heading from '@/components/ui/Heading.astro'
import Text from '@/components/ui/Text.astro'

interface Props {
  log: CollectionEntry<'projectLogs'>
}

const { log } = Astro.props
const { Content } = await log.render()

// Format date as [YYYY-MM-DD HH:MM]
const formatTimestamp = (date: Date) => {
  const year = date.getFullYear()
  const month = String(date.getMonth() + 1).padStart(2, '0')
  const day = String(date.getDate()).padStart(2, '0')
  const hours = String(date.getHours()).padStart(2, '0')
  const minutes = String(date.getMinutes()).padStart(2, '0')
  return `${year}-${month}-${day} ${hours}:${minutes}`
}

// Tag colors (terminal aesthetic)
const tagColors: Record<string, string> = {
  milestone: 'bg-primary/20 text-primary border-primary/40',
  bug: 'bg-red-500/20 text-red-400 border-red-500/40',
  experiment: 'bg-primary-500/20 text-primary-400 border-primary-500/40',
  ux: 'bg-purple-500/20 text-purple-400 border-purple-500/40',
  default: 'bg-muted/20 text-muted border-border',
}

const getTagColor = (tag: string) => {
  return tagColors[tag.toLowerCase()] || tagColors.default
}
---

<article class="group border-l-2 border-border/30 pl-6 transition-colors hover:border-primary/50">
  <!-- Timestamp and title -->
  <header class="mb-3">
    <Text
      as="time"
      variant="caption"
      font="mono"
      class="text-muted/70"
      datetime={log.data.date.toISOString()}
    >
      [{formatTimestamp(log.data.date)}]
    </Text>
    <Heading level="h3" font="mono" class="mt-1 text-lg">
      {log.data.title}
    </Heading>
  </header>

  <!-- Tags -->
  {
    log.data.tags.length > 0 && (
      <div class="mb-4 flex flex-wrap gap-2">
        {log.data.tags.map((tag) => (
          <span
            class={`rounded border px-2 py-0.5 font-mono text-xs font-medium ${getTagColor(tag)}`}
          >
            {tag}
          </span>
        ))}
      </div>
    )
  }

  <!-- Log content (markdown) -->
  <div
    class="prose prose-sm prose-invert max-w-none font-mono text-sm leading-relaxed text-muted prose-headings:font-mono prose-headings:text-fg prose-p:text-muted prose-a:text-link prose-a:underline prose-a:decoration-transparent prose-a:transition-colors hover:prose-a:decoration-link prose-strong:text-fg prose-code:rounded prose-code:bg-surface-hover prose-code:px-1 prose-code:py-0.5 prose-code:font-mono prose-code:text-primary prose-pre:bg-surface-hover prose-pre:text-fg prose-ul:text-muted prose-ol:text-muted"
  >
    <Content />
  </div>
</article>
