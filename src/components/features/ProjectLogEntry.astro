---
// ProjectLogEntry - Terminal-style log entry component
import type { CollectionEntry } from 'astro:content'

import Badge from '@/components/primitives/Badge.astro'
import Heading from '@/components/primitives/Heading.astro'
import Prose from '@/components/primitives/Prose.astro'
import Sheet from '@/components/primitives/Sheet.astro'
import Stack from '@/components/primitives/Stack.astro'
import Text from '@/components/primitives/Text.astro'

export interface Props {
  log: CollectionEntry<'projectLogs'>
}

const { log } = Astro.props
const { Content } = await log.render()

// Format date as [YYYY-MM-DD HH:MM]
const formatTimestamp = (date: Date) => {
  const year = date.getFullYear()
  const month = String(date.getMonth() + 1).padStart(2, '0')
  const day = String(date.getDate()).padStart(2, '0')
  const hours = String(date.getHours()).padStart(2, '0')
  const minutes = String(date.getMinutes()).padStart(2, '0')
  return `${year}-${month}-${day} ${hours}:${minutes}`
}

// Tag color mappings for Badge component
const tagColorMap: Record<
  string,
  { color: 'primary' | 'danger' | 'info' | 'muted'; customClass?: string }
> = {
  milestone: { color: 'primary' },
  bug: { color: 'danger' },
  experiment: { color: 'info' },
  ux: { color: 'info' },
}

const getTagProps = (tag: string) => tagColorMap[tag.toLowerCase()] ?? { color: 'muted' }
---

<Sheet as="article" variant="bar" color="neutral" padding="none" hover class="pl-6">
  <!-- Timestamp and title -->
  <header class="mb-3">
    <Text as="time" color="muted" datetime={log.data.date.toISOString()}>
      [{formatTimestamp(log.data.date)}]
    </Text>
    <Heading size="h3" class="mt-1 text-lg">
      {log.data.title}
    </Heading>
  </header>

  <!-- Tags -->
  {
    log.data.tags.length > 0 && (
      <Stack direction="row" space="xs" class="mb-4 flex-wrap">
        {log.data.tags.map((tag) => (
          <Badge
            color={getTagProps(tag).color}
            size="xs"
            class={`px-2 ${getTagProps(tag).customClass ?? ''}`}
          >
            {tag}
          </Badge>
        ))}
      </Stack>
    )
  }

  <!-- Log content (markdown) -->
  <Prose>
    <Content />
  </Prose>
</Sheet>
