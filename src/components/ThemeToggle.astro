---
import { Icon } from 'astro-icon/components'

import Menu from './Menu.astro'
import MenuItem from './MenuItem.astro'
import ToggleButton from './ToggleButton.astro'
---

<ToggleButton id="theme-toggle" ariaLabel="Toggle theme menu">
  <!-- Current theme icon (only one visible at a time) -->
  <Icon id="theme-icon-light" name="heroicons:sun-20-solid" class="hidden h-5 w-5" />
  <Icon id="theme-icon-dark" name="heroicons:moon-20-solid" class="hidden h-5 w-5" />
  <Icon id="theme-icon-system" name="heroicons:computer-desktop-20-solid" class="hidden h-5 w-5" />
  <!-- Chevron -->
  <Icon name="heroicons:chevron-down-20-solid" class="h-4 w-4" />

  <!-- Dropdown menu -->
  <Menu slot="menu" id="theme-menu" class="w-36">
    <MenuItem value="light">
      <Icon name="heroicons:sun-20-solid" class="h-5 w-5" />
      <span>Light</span>
    </MenuItem>
    <MenuItem value="dark">
      <Icon name="heroicons:moon-20-solid" class="h-5 w-5" />
      <span>Dark</span>
    </MenuItem>
    <MenuItem value="system">
      <Icon name="heroicons:computer-desktop-20-solid" class="h-5 w-5" />
      <span>System</span>
    </MenuItem>
  </Menu>
</ToggleButton>

<script>
  import { applyTheme, getTheme, setTheme } from '../lib/theme'
  import type { Theme } from '../lib/theme'

  // Get DOM elements
  const lightIcon = document.getElementById('theme-icon-light')
  const darkIcon = document.getElementById('theme-icon-dark')
  const systemIcon = document.getElementById('theme-icon-system')
  const menuItems = document.querySelectorAll<HTMLElement>('#theme-menu .menu-item')
  const themeMenu = document.getElementById('theme-menu')
  const themeButton = document.getElementById('theme-toggle')

  // Update which icon is visible based on current theme
  function updateThemeIcon(theme: Theme): void {
    lightIcon?.classList.add('hidden')
    darkIcon?.classList.add('hidden')
    systemIcon?.classList.add('hidden')

    if (theme === 'light') {
      lightIcon?.classList.remove('hidden')
    } else if (theme === 'dark') {
      darkIcon?.classList.remove('hidden')
    } else {
      systemIcon?.classList.remove('hidden')
    }
  }

  // Update which menu item is selected
  function updateMenuSelection(theme: Theme): void {
    menuItems.forEach((item) => {
      const itemValue = item.getAttribute('data-value')
      if (itemValue === theme) {
        item.classList.add('selected')
      } else {
        item.classList.remove('selected')
      }
    })
  }

  // Initialize theme on page load
  function initializeTheme(): void {
    const theme = getTheme()
    applyTheme(theme)
    updateThemeIcon(theme)
    updateMenuSelection(theme)
  }

  // Handle menu item clicks
  menuItems.forEach((item) => {
    item.addEventListener('click', (e) => {
      e.stopPropagation()
      const selectedTheme = item.getAttribute('data-value') as Theme

      if (selectedTheme) {
        setTheme(selectedTheme)
        applyTheme(selectedTheme)
        updateThemeIcon(selectedTheme)
        updateMenuSelection(selectedTheme)

        // Close menu
        themeMenu?.classList.add('hidden')
        themeButton?.setAttribute('aria-expanded', 'false')
      }
    })
  })

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    const theme = getTheme()
    if (theme === 'system') {
      applyTheme(theme)
      updateThemeIcon(theme)
    }
  })

  // Initialize on page load
  initializeTheme()
</script>
