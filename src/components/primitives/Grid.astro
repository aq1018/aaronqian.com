---
import {
  gridContainerCva,
  gridItemCva,
  type GridContainerStyle,
  type GridItemStyle,
} from './Grid.cva'
import {
  getSizeClasses,
  getOffsetClasses,
  type ResponsiveValue,
  type ResponsiveOffset,
} from './Grid.utils'
import { cn } from '@/lib/utils'

interface BaseProps {
  class?: string
  [key: string]: any // Allow any additional HTML attributes
}

// Container props
interface ContainerProps extends GridContainerStyle, BaseProps {
  // Size props must not be present for container
  size?: never
  offset?: never
  justifySelf?: never
  alignSelf?: never
}

// Item props
interface ItemProps extends GridItemStyle, BaseProps {
  size?: number | 'auto' | 'grow' | ResponsiveValue
  offset?: number | ResponsiveOffset
  // Container props must not be present for item
  columns?: never
  spacing?: never
  direction?: never
  justify?: never
  align?: never
}

export type Props = ContainerProps | ItemProps

const props = Astro.props

// Determine if this is a container or item
const isItem = 'size' in props && props.size !== undefined

// Build classes based on mode
let classes = ''

let restProps = {}

if (isItem) {
  // Item mode
  const {
    size,
    offset,
    justifySelf,
    alignSelf,
    class: className = '',
    ...rest
  } = props as ItemProps

  const sizeClasses = getSizeClasses(size)
  const offsetClasses = getOffsetClasses(offset)
  const itemVariantClasses = gridItemCva({ justifySelf, alignSelf })

  classes = cn(itemVariantClasses, sizeClasses, offsetClasses, className)
  restProps = rest
} else {
  // Container mode
  const {
    columns,
    spacing,
    direction,
    justify,
    align,
    class: className = '',
    ...rest
  } = props as ContainerProps

  const containerVariantClasses = gridContainerCva({
    columns,
    spacing,
    direction,
    justify,
    align,
  })

  classes = cn(containerVariantClasses, className)
  restProps = rest
}
---

<div class={classes} {...restProps}>
  <slot />
</div>
