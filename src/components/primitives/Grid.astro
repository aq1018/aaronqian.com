---
import type { HTMLAttributes } from 'astro/types'

import {
  type GridContainerStyle,
  type GridItemStyle,
  gridContainerCva,
  gridItemCva,
} from './Grid.cva'

import { cn } from '@/lib/utils'

interface BaseProps extends HTMLAttributes<'div'> {
  class?: string
}

// Container props - HTMLAttributes first, then GridContainerStyle overrides
interface ContainerProps extends BaseProps, GridContainerStyle {
  // Size props must not be present for container
  size?: never
  'size-sm'?: never
  'size-md'?: never
  'size-lg'?: never
  'size-xl'?: never
  offset?: never
  'offset-sm'?: never
  'offset-md'?: never
  'offset-lg'?: never
  'offset-xl'?: never
  justifySelf?: never
  alignSelf?: never
}

// Item props - HTMLAttributes first, then GridItemStyle overrides
interface ItemProps extends BaseProps, GridItemStyle {
  // Container props must not be present for item
  columns?: never
  spacing?: never
  direction?: never
  justify?: never
  align?: never
}

export type Props = ContainerProps | ItemProps

const props = Astro.props

// Type guard to check if props are ItemProps
function isItemProps(p: ContainerProps | ItemProps): p is ItemProps {
  return 'size' in p && p.size !== undefined
}

// Build classes based on mode
let classes = ''
let restProps = {}

if (isItemProps(props)) {
  // Item mode
  const {
    size,
    'size-sm': sizeSm,
    'size-md': sizeMd,
    'size-lg': sizeLg,
    'size-xl': sizeXl,
    offset,
    'offset-sm': offsetSm,
    'offset-md': offsetMd,
    'offset-lg': offsetLg,
    'offset-xl': offsetXl,
    justifySelf,
    alignSelf,
    class: className = '',
    ...rest
  } = props

  const itemVariantClasses = gridItemCva({
    size,
    'size-sm': sizeSm,
    'size-md': sizeMd,
    'size-lg': sizeLg,
    'size-xl': sizeXl,
    offset,
    'offset-sm': offsetSm,
    'offset-md': offsetMd,
    'offset-lg': offsetLg,
    'offset-xl': offsetXl,
    justifySelf,
    alignSelf,
  })

  classes = cn(itemVariantClasses, className)
  restProps = rest
} else {
  // Container mode - TypeScript now knows props is ContainerProps
  const { columns, spacing, direction, justify, align, class: className = '', ...rest } = props

  const containerVariantClasses = gridContainerCva({
    columns,
    spacing,
    direction,
    justify,
    align,
  })

  classes = cn(containerVariantClasses, className)
  restProps = rest
}
---

<div class={classes} {...restProps}>
  <slot />
</div>
