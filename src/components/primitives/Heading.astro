---
import type { HTMLAttributes } from 'astro/types'

import { type HeadingStyle, headingVariants } from './typography.cva'

import { cn } from '@/lib/utils'

type AsTag = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'div' | 'p' | 'span'

export interface Props extends Omit<HTMLAttributes<'h1'>, 'color'>, HeadingStyle {
  as?: AsTag
  class?: string
}

const {
  as,
  size = 'h2',
  align,
  color,
  family,
  whitespace,
  truncate,
  transform,
  break: breakProp,
  line,
  preset,
  class: className = '',
  ...rest
} = Astro.props

const classes = cn(
  headingVariants({
    size,
    align,
    color,
    family,
    transform,
    whitespace,
    truncate,
    break: breakProp,
    line,
    preset,
  }),
  className,
)

// Map size â†’ numeric level
const level =
  size === 'display-2' || size === 'display-1' || size === 'h1'
    ? 1
    : size === 'h2'
      ? 2
      : size === 'h3'
        ? 3
        : size === 'h4'
          ? 4
          : size === 'h5'
            ? 5
            : 6

// Infer tag from level (no assertions)
const inferredTag = (() => {
  switch (level) {
    case 1:
      return 'h1' as const
    case 2:
      return 'h2' as const
    case 3:
      return 'h3' as const
    case 4:
      return 'h4' as const
    case 5:
      return 'h5' as const
    default:
      return 'h6' as const
  }
})()

const tag: AsTag = as ?? inferredTag
const isHeadingTag =
  tag === 'h1' || tag === 'h2' || tag === 'h3' || tag === 'h4' || tag === 'h5' || tag === 'h6'

const roleAttrs = isHeadingTag ? {} : { role: 'heading' as const, 'aria-level': `${level}` }
const finalAttrs: HTMLAttributes<'h1'> = { ...rest, ...roleAttrs }
---

{
  tag === 'h1' && (
    <h1 class={classes} {...finalAttrs}>
      <slot />
    </h1>
  )
}
{
  tag === 'h2' && (
    <h2 class={classes} {...finalAttrs}>
      <slot />
    </h2>
  )
}
{
  tag === 'h3' && (
    <h3 class={classes} {...finalAttrs}>
      <slot />
    </h3>
  )
}
{
  tag === 'h4' && (
    <h4 class={classes} {...finalAttrs}>
      <slot />
    </h4>
  )
}
{
  tag === 'h5' && (
    <h5 class={classes} {...finalAttrs}>
      <slot />
    </h5>
  )
}
{
  tag === 'h6' && (
    <h6 class={classes} {...finalAttrs}>
      <slot />
    </h6>
  )
}
{
  tag === 'div' && (
    <div class={classes} {...finalAttrs}>
      <slot />
    </div>
  )
}
{
  tag === 'p' && (
    <p class={classes} {...finalAttrs}>
      <slot />
    </p>
  )
}
{
  tag === 'span' && (
    <span class={classes} {...finalAttrs}>
      <slot />
    </span>
  )
}
