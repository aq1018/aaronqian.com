---
import type { HTMLAttributes } from 'astro/types'

import { type HeadingStyle, headingVariants } from './typography.cva'

import { cn } from '@/lib/utils'

// h1-h6 have identical HTML attributes, so we use h1 as the base
// HTMLAttributes first, then HeadingStyle overrides (including 'color')
export interface Props extends Omit<HTMLAttributes<'h1'>, 'color'>, HeadingStyle {
  class?: string
}

const {
  size = 'h2',
  align,
  color,
  family,
  whitespace,
  truncate,
  transform,
  break: breakProp,
  class: className = '',
  ...rest
} = Astro.props

const classes = cn(
  headingVariants({
    size,
    align,
    color,
    family,
    transform,
    whitespace,
    truncate,
    break: breakProp,
  }),
  className,
)

// Map size to semantic HTML element
const isH1 = size === 'display-2' || size === 'display-1' || size === 'h1'
const isH2 = size === 'h2'
const isH3 = size === 'h3'
const isH4 = size === 'h4'
const isH5 = size === 'h5'
const isH6 = size === 'h6'
---

{
  isH1 && (
    <h1 class={classes} {...rest}>
      <slot />
    </h1>
  )
}
{
  isH2 && (
    <h2 class={classes} {...rest}>
      <slot />
    </h2>
  )
}
{
  isH3 && (
    <h3 class={classes} {...rest}>
      <slot />
    </h3>
  )
}
{
  isH4 && (
    <h4 class={classes} {...rest}>
      <slot />
    </h4>
  )
}
{
  isH5 && (
    <h5 class={classes} {...rest}>
      <slot />
    </h5>
  )
}
{
  isH6 && (
    <h6 class={classes} {...rest}>
      <slot />
    </h6>
  )
}
